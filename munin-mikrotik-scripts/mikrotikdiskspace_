#!/usr/bin/php

<?php

# Original script from: http://wiki.mikrotik.com/wiki/Munin_Monitoring

# USAGE
#
# place the script in the munin plugins folder and use the following naming convention:
#
# mikrotikcpu_router-hostname
#
# example:
# mikrotikcpu_router01.local.net
#
# Configuration:
#  - Install the routeros_api.class.php php class.
#  - Set your mikrotik user and pass in the $API->connect connection string.
#
#

// Change the following path as appropriate
require('/srv/http/munin/ros/routeros_api.class.php');

$API = new routeros_api();

// debug
$API->debug = false;

// Work out hostname
$param = explode("_",$argv[0],2);

if (isset($param[1])) {
  $hostname = $param[1];
} else {
  die("No hostname available. Filename should be like: mikrotikmemory_example.changeip.net");
}

//if (isset($param[2])) {
//  $ifname = $param[2];
//} else {
//  die("No interface name available. Filename should be like: mikrotikifrate_example.changeip.net_ether1");
//}

// change username/password as appropriate
if ($API->connect($hostname, 'munin', 'munin')) {

   //$API->write('/system/resource/print',false);
   $API->write('/system/resource/print');

   $READ = $API->read(false);
   $resources = $API->parse_response($READ);
   //print_r($resources);
   $API->disconnect();

   $connect = 'yes';
} else {
   $connect = 'no (could not connect)';
}

if ($argc > 1 && $argv[1] == 'autoconf') {
  print $connect . "\n";
  exit;
}

// Output configuration information
if ($argc > 1 && $argv[1] == 'config') {
  print "host_name $hostname\n";
  #print "graph_args --base 1024 -l 0 --vertical-label Bytes --upper-limit " . ($resources[0]['total-hdd-space'] * 1024) .  "\n";
  print "graph_args --base 1024 -l 0 --vertical-label Bytes --upper-limit " . ($resources[0]['total-hdd-space']) .  "\n";
  print "graph_title Internal disk usage\n";
  print "graph_vlabel bytes\n";
  print "graph_category system\n";
  print "graph_info This graph shows the internal storage disk usage\n";
  print "graph_order Total Used\n";
  print "Total.label Total Disk\n";
  print "Total.draw AREA\n";
  print "Used.label Used Disk\n";
  print "Used.draw AREA\n";

  exit;
}

// Exit if we don't have any servers to report on.
if (empty($resources)) {
  exit;
}

// Finally, print it all out.
foreach ($resources as $resource)
{
  //debug
  //print_r($resource); 
  
  print "Total.value " . $resource['total-hdd-space'] . "\n";
  
  //debug
  //print $resource['free-hdd-space'] . "\n";

  print "Used.value " . ($resource['total-hdd-space'] - $resource['free-hdd-space']) . "\n";
}

exit;

?>
